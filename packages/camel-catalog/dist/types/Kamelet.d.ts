/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Kamelet is the Schema for the kamelets API
 */
export interface Kamelet {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: unknown;
  };
  /**
   * the desired specification
   */
  spec?: {
    /**
     * data specification types for the events consumed/produced by the Kamelet
     */
    dataTypes?: {
      /**
       * DataTypesSpec represents the specification for a set of data types
       */
      [k: string]: {
        /**
         * the default data type for this Kamelet
         */
        default?: string;
        /**
         * one to many header specifications
         */
        headers?: {
          /**
           * HeaderSpec represents the specification for a header used in the Kamelet
           */
          [k: string]: {
            default?: string;
            description?: string;
            required?: boolean;
            title?: string;
            type?: string;
            [k: string]: unknown;
          };
        };
        /**
         * one to many data type specifications
         */
        types?: {
          /**
           * DataTypeSpec represents the specification for a data type
           */
          [k: string]: {
            /**
             * the list of Camel or Maven dependencies required by the data type
             */
            dependencies?: string[];
            /**
             * optional description
             */
            description?: string;
            /**
             * the data type format name
             */
            format?: string;
            /**
             * one to many header specifications
             */
            headers?: {
              /**
               * HeaderSpec represents the specification for a header used in the Kamelet
               */
              [k: string]: {
                default?: string;
                description?: string;
                required?: boolean;
                title?: string;
                type?: string;
                [k: string]: unknown;
              };
            };
            /**
             * media type as expected for HTTP media types (ie, application/json)
             */
            mediaType?: string;
            /**
             * the expected schema for the data type
             */
            schema?: {
              /**
               * JSONSchemaURL represents a schema url.
               */
              $schema?: string;
              description?: string;
              /**
               * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
               */
              example?: {
                [k: string]: unknown;
              };
              /**
               * ExternalDocumentation allows referencing an external resource for extended documentation.
               */
              externalDocs?: {
                description?: string;
                url?: string;
                [k: string]: unknown;
              };
              id?: string;
              properties?: {
                [k: string]: {
                  /**
                   * default is a default value for undefined object fields.
                   */
                  default?: {
                    [k: string]: unknown;
                  };
                  deprecated?: boolean;
                  description?: string;
                  enum?: {
                    [k: string]: unknown;
                  }[];
                  /**
                   * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
                   */
                  example?: {
                    [k: string]: unknown;
                  };
                  exclusiveMaximum?: boolean;
                  exclusiveMinimum?: boolean;
                  /**
                   * format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
                   *  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF" following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,255)" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
                   */
                  format?: string;
                  id?: string;
                  maxItems?: number;
                  maxLength?: number;
                  maxProperties?: number;
                  /**
                   * A Number represents a JSON number literal.
                   */
                  maximum?: string;
                  minItems?: number;
                  minLength?: number;
                  minProperties?: number;
                  /**
                   * A Number represents a JSON number literal.
                   */
                  minimum?: string;
                  /**
                   * A Number represents a JSON number literal.
                   */
                  multipleOf?: string;
                  nullable?: boolean;
                  pattern?: string;
                  title?: string;
                  type?: string;
                  uniqueItems?: boolean;
                  /**
                   * XDescriptors is a list of extended properties that trigger a custom behavior in external systems
                   */
                  "x-descriptors"?: string[];
                  [k: string]: unknown;
                };
              };
              required?: string[];
              title?: string;
              type?: string;
              [k: string]: unknown;
            };
            /**
             * the data type component scheme
             */
            scheme?: string;
            [k: string]: unknown;
          };
        };
        [k: string]: unknown;
      };
    };
    /**
     * defines the formal configuration of the Kamelet
     */
    definition?: {
      /**
       * JSONSchemaURL represents a schema url.
       */
      $schema?: string;
      description?: string;
      /**
       * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
       */
      example?: {
        [k: string]: unknown;
      };
      /**
       * ExternalDocumentation allows referencing an external resource for extended documentation.
       */
      externalDocs?: {
        description?: string;
        url?: string;
        [k: string]: unknown;
      };
      id?: string;
      properties?: {
        [k: string]: {
          /**
           * default is a default value for undefined object fields.
           */
          default?: {
            [k: string]: unknown;
          };
          deprecated?: boolean;
          description?: string;
          enum?: {
            [k: string]: unknown;
          }[];
          /**
           * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
           */
          example?: {
            [k: string]: unknown;
          };
          exclusiveMaximum?: boolean;
          exclusiveMinimum?: boolean;
          /**
           * format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
           *  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF" following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,255)" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
           */
          format?: string;
          id?: string;
          maxItems?: number;
          maxLength?: number;
          maxProperties?: number;
          /**
           * A Number represents a JSON number literal.
           */
          maximum?: string;
          minItems?: number;
          minLength?: number;
          minProperties?: number;
          /**
           * A Number represents a JSON number literal.
           */
          minimum?: string;
          /**
           * A Number represents a JSON number literal.
           */
          multipleOf?: string;
          nullable?: boolean;
          pattern?: string;
          title?: string;
          type?: string;
          uniqueItems?: boolean;
          /**
           * XDescriptors is a list of extended properties that trigger a custom behavior in external systems
           */
          "x-descriptors"?: string[];
          [k: string]: unknown;
        };
      };
      required?: string[];
      title?: string;
      type?: string;
      [k: string]: unknown;
    };
    /**
     * Camel dependencies needed by the Kamelet
     */
    dependencies?: string[];
    /**
     * sources in any Camel DSL supported
     */
    sources?: {
      /**
       * if the content is compressed (base64 encrypted)
       */
      compression?: boolean;
      /**
       * the source code (plain text)
       */
      content?: string;
      /**
       * the confimap key holding the source content
       */
      contentKey?: string;
      /**
       * the confimap reference holding the source content
       */
      contentRef?: string;
      /**
       * the content type (tipically text or binary)
       */
      contentType?: string;
      /**
       * Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader uses to pre/post process sources
       */
      interceptors?: string[];
      /**
       * specify which is the language (Camel DSL) used to interpret this source code
       */
      language?: string;
      /**
       * Loader is an optional id of the org.apache.camel.k.RoutesLoader that will interpret this source at runtime
       */
      loader?: string;
      /**
       * the name of the specification
       */
      name?: string;
      /**
       * the path where the file is stored
       */
      path?: string;
      /**
       * List of property names defined in the source (e.g. if type is "template")
       */
      "property-names"?: string[];
      /**
       * the source code (binary)
       */
      rawContent?: string;
      /**
       * Type defines the kind of source described by this object
       */
      type?: string;
      [k: string]: unknown;
    }[];
    /**
     * the main source in YAML DSL
     */
    template?: {
      [k: string]: unknown;
    };
    /**
     * data specification types for the events consumed/produced by the Kamelet Deprecated: In favor of using DataTypes
     */
    types?: {
      /**
       * EventTypeSpec represents a specification for an event type Deprecated: In favor of using DataTypeSpec
       */
      [k: string]: {
        /**
         * media type as expected for HTTP media types (ie, application/json)
         */
        mediaType?: string;
        /**
         * the expected schema for the event
         */
        schema?: {
          /**
           * JSONSchemaURL represents a schema url.
           */
          $schema?: string;
          description?: string;
          /**
           * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
           */
          example?: {
            [k: string]: unknown;
          };
          /**
           * ExternalDocumentation allows referencing an external resource for extended documentation.
           */
          externalDocs?: {
            description?: string;
            url?: string;
            [k: string]: unknown;
          };
          id?: string;
          properties?: {
            [k: string]: {
              /**
               * default is a default value for undefined object fields.
               */
              default?: {
                [k: string]: unknown;
              };
              deprecated?: boolean;
              description?: string;
              enum?: {
                [k: string]: unknown;
              }[];
              /**
               * JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
               */
              example?: {
                [k: string]: unknown;
              };
              exclusiveMaximum?: boolean;
              exclusiveMinimum?: boolean;
              /**
               * format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
               *  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF" following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,255)" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
               */
              format?: string;
              id?: string;
              maxItems?: number;
              maxLength?: number;
              maxProperties?: number;
              /**
               * A Number represents a JSON number literal.
               */
              maximum?: string;
              minItems?: number;
              minLength?: number;
              minProperties?: number;
              /**
               * A Number represents a JSON number literal.
               */
              minimum?: string;
              /**
               * A Number represents a JSON number literal.
               */
              multipleOf?: string;
              nullable?: boolean;
              pattern?: string;
              title?: string;
              type?: string;
              uniqueItems?: boolean;
              /**
               * XDescriptors is a list of extended properties that trigger a custom behavior in external systems
               */
              "x-descriptors"?: string[];
              [k: string]: unknown;
            };
          };
          required?: string[];
          title?: string;
          type?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  /**
   * the actual status of the resource
   */
  status?: {
    /**
     * Conditions --
     */
    conditions?: {
      /**
       * Last time the condition transitioned from one status to another.
       */
      lastTransitionTime?: string;
      /**
       * The last time this condition was updated.
       */
      lastUpdateTime?: string;
      /**
       * A human-readable message indicating details about the transition.
       */
      message?: string;
      /**
       * The reason for the condition's last transition.
       */
      reason?: string;
      /**
       * Status of the condition, one of True, False, Unknown.
       */
      status: string;
      /**
       * Type of kamelet condition.
       */
      type: string;
      [k: string]: unknown;
    }[];
    /**
     * ObservedGeneration is the most recent generation observed for this Kamelet.
     */
    observedGeneration?: number;
    /**
     * Phase --
     */
    phase?: string;
    /**
     * Properties --
     */
    properties?: {
      /**
       * the default value of the property (if any)
       */
      default?: string;
      /**
       * the name of the property
       */
      name?: string;
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
